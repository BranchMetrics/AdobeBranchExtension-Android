plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'io.branch.adobe.extension'

    buildFeatures {
        buildConfig = true
    }

    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_MINIMUM)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            enableUnitTestCoverage = true
            enableAndroidTestCoverage = true
            buildConfigField "long", "VERSION_CODE", project.VERSION_CODE
            buildConfigField "String", "VERSION_NAME", "\"${project.VERSION_NAME}\""
        }

        release {
            minifyEnabled false
            consumerProguardFile('proguard-rules.pro')
            buildConfigField "long", "VERSION_CODE", project.VERSION_CODE
            buildConfigField "String", "VERSION_NAME", "\"${project.VERSION_NAME}\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        archiveClassifier.set("javadoc")
        from androidJavadocs.destinationDir
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'com.android.installreferrer:installreferrer:2.2'

    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test:rules:1.7.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'

    // Branch
    api 'io.branch.sdk.android:library:5.20.1'
    implementation ('com.google.android.gms:play-services-ads-identifier:18.0.1')
    // for Huawei devices without GMS, adding it requires bumping up min api level to 19 though, so we
    // leave it up to the client to add it following Branch documentation here: https://help.branch.io/developers-hub/docs/android-basic-integration
    //implementation 'com.huawei.hms:ads-identifier:3.4.28.305'

    // Adobe
    androidTestImplementation 'com.adobe.marketing.mobile:analytics:3.0.2'
    androidTestImplementation 'com.adobe.marketing.mobile:userprofile:3.0.1'
    implementation 'com.adobe.marketing.mobile:core:3.5.0'
    implementation 'com.adobe.marketing.mobile:lifecycle:3.0.2'
    implementation 'com.adobe.marketing.mobile:identity:3.0.2'
    implementation 'com.adobe.marketing.mobile:signal:3.0.1'

    androidTestImplementation project(path: ':AdobeBranchExtension')
}

def applyCommonConfig = { MavenPublication publication ->
    publication.groupId = GROUP
    publication.artifactId = POM_ARTIFACT_ID
    publication.version = VERSION_NAME

    publication.artifact bundleReleaseAar
    publication.artifact androidSourcesJar
    publication.artifact androidJavadocsJar

    publication.pom {
        name.set(POM_NAME)
        description.set(POM_DESCRIPTION)
        url.set(POM_URL)

        developers {
            developer {
                id.set(POM_DEVELOPER_ID)
                name.set(POM_DEVELOPER_NAME)
            }
        }

        licenses {
            license {
                name.set(POM_LICENCE_NAME)
                url.set(POM_LICENCE_URL)
                distribution.set(POM_LICENCE_DIST)
            }
        }

        scm {
            url.set(POM_SCM_URL)
            connection.set(POM_SCM_CONNECTION)
            developerConnection.set(POM_SCM_DEV_CONNECTION)
        }

        withXml {
            def node = asNode()
            def dependenciesNode = node.appendNode('dependencies')

            configurations.implementation.allDependencies.each { dependency ->
                if (dependency.group != null && dependency.name != null && dependency.version != null) {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)

                    // Default scope to compile
                    dependencyNode.appendNode('scope', 'compile')

                    // Check for specific artifact IDs and add 'optional' flag
                    if (dependency.name in ['okhttp', 'firebase-appindexing']) {
                        dependencyNode.appendNode('optional', 'true')
                    }
                }
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {

            debug(MavenPublication) {
                applyCommonConfig(delegate as MavenPublication)
                from components.findByName("debug")
            }

            release(MavenPublication) {
                applyCommonConfig(delegate as MavenPublication)
                from components.findByName("release")
            }
        }

        repositories {
            maven {
                url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        sign publishing.publications.release
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    if (name.contains("Debug")) {
        dependsOn assembleDebug
    } else if (name.contains("Release")) {
        dependsOn assembleRelease
    }
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://central.sonatype.com/repository/maven-snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}